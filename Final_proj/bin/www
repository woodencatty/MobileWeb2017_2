#!/usr/bin/env node

//db connection
const client = mysql.createConnection({
  host: 'localhost',
  port: 3306,
  user: 'localuser',
  password: '1111',
  database: 'web'
});


/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('final-proj:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
console.log("Web Server is running in 3000...")
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

//기기 탐색 소켓
function Setup_device_Socket(){
  http.createServer((request, response) => {
    if (request.method == 'POST') {
      if (request.url == '/device/information') {
         client.query('INSERT INTO SearchedDevice (deviceid, version, sort, ipv4, describe) VALUES (?,?,?,?,?)', [request.headers.device_id, request.headers.version, request.headers.sort, request.connection.remoteAddress, request.headers.describe], (err) => {
          if (err) {
              console.log(err);
              console.log("DB query Error!");
              response.writeHead(404);
              response.end();
          } else {
              console.log("SUCCESS");
              response.writeHead(200);
              response.end();
          }
      });
         response.writeHead(200);
        response.end("gotit");    //기기 확인메세지 전송
        console.log("Hi! "+ Device_ID);   //기기 식별

      }
      if (request.url == '/device/leave') {
        response.writeHead(200);
        response.end("gotit. bye");    //기기 확인메세지 전송
        client.query('DELETE FROM SearchedDevice WHERE deviceid = ?', [request.headers.device_id], (err, rows) => {
          if (err) {
              console.log(err);
              console.log("DB query Error!");
              response.writeHead(404);
              response.end();
          } else {
              console.log("SUCCESS");
              response.writeHead(200);
              response.end();
          }
      });
        
      }
      else {
        console.log("error");
        response.writeHead(404);
        response.end();
      }
    } /* GET method */
  }).listen(3010, () => {
    console.log('Socket is Running (3010) ...');
  });
}

Setup_device_Socket();    


